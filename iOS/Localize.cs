using System; using System.Threading; using System.Globalization;  using PTSPensjon.iOS;  using Foundation; using Xamarin.Forms;  [assembly:Dependency(typeof(Localize))] namespace PTSPensjon.iOS { 	public class Localize : ILocalize     { 		public Localize() {}          public void SetLocale (CultureInfo ci)         {             Thread.CurrentThread.CurrentCulture = ci;             Thread.CurrentThread.CurrentUICulture = ci;         }         public CultureInfo GetCurrentCultureInfo ()         {             var netLanguage = "nb_NO";             if (NSLocale.PreferredLanguages.Length > 0)             {                 var pref = NSLocale.PreferredLanguages[0];  				//Console.WriteLine("Preferred language: " + pref); 				/*foreach (var locale in NSLocale.AvailableLocaleIdentifiers) 				{ 					Console.WriteLine("Locale available: " + locale); 				}*/                  netLanguage = iOSToDotnetLanguage(pref);             }             // this gets called a lot - try/catch can be expensive so consider caching or something             CultureInfo ci = null;             try             {                 ci = new CultureInfo(netLanguage);             }             catch (CultureNotFoundException e1)             {                 // iOS locale not valid .NET culture (eg. "en-ES" : English in Spain)                 // fallback to first characters, in this case "en"                 try                 {                     var fallback = ToDotnetFallbackLanguage(new PlatformCulture(netLanguage));                     ci = new System.Globalization.CultureInfo(fallback);                 }                 catch (CultureNotFoundException e2)                 {                     // iOS language not valid .NET culture, falling back to Norwegian                     ci = new System.Globalization.CultureInfo("nb-NO");                 }             }             return ci;         }         string iOSToDotnetLanguage(string iOSLanguage)         {             var netLanguage = iOSLanguage;             //certain languages need to be converted to CultureInfo equivalent             switch (iOSLanguage)             {                 case "nn_NO": 					netLanguage = "nb-NO";
					break;                 case "nb_NO":                     netLanguage = "nb-NO";                     break;                 case "se_NO":                     netLanguage = "nb-NO";                      break;             }             return netLanguage;         }         string ToDotnetFallbackLanguage (PlatformCulture platCulture)         {             var netLanguage = platCulture.LanguageCode;             return netLanguage;         }     } }